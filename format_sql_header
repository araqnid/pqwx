#!/usr/bin/perl

require 5;
use strict;
use warnings;
use utf8;
use Getopt::Std;
use vars qw($opt_c $opt_f $opt_h);

getopts('c:f:h:') or die "Syntax: $0 [-c classname] [-f singleton-function] [-h header-file] [infile [outfile]]";

sub slurp_template {
    local $/;
    undef $/;
    my $template = <DATA>;
    return $template;
}

my $class_template = slurp_template();

sub c_escape {
    my $str = shift;
    our %escape = ( "\"" => "\\\"", "\r" => "\\r", "\n" => "\\n", "\t" => "\\t", "\\" => "\\\\" );
    $str =~ s/([\"\r\n\t\\])/$escape{$1}/ge;
    return $str;
}

sub collapse_sql {
    my $sql = shift;
    $sql =~ s{-- (.+)}{/* $1 */}g;
    $sql =~ s{\s+}{ }g;
    return $sql;
}

sub flush_sql {
    my($output, $tag, $buffer) = @_;
    $buffer =~ s/\n+$//;
    $buffer =~ s/^\n+//;
    my $sql = collapse_sql($buffer);
    my($name, $line, $major_version, $minor_version) = @$tag;
    if ($major_version) {
	$sql = "/* $name (version >= $major_version.$minor_version) */ $sql";
	print $output "AddSql(_T(\"".c_escape($name)."\"), \"".c_escape($sql)."\", $major_version, $minor_version);\n";
    }
    else {
	$sql = "/* $name */ $sql";
	print $output "AddSql(_T(\"".c_escape($name)."\"), \"".c_escape($sql)."\");\n";
    }
}

sub process_header {
    my $classname = shift;
    my $functionname = shift;
    my $input = shift;
    my $output = shift;

    my $includes = '';
    if ($opt_h) {
	$includes .= "#include \"$opt_h\"\n";
    }

    my($header, $footer) = split(/\{\{content\}\}/, $class_template, 2);
    $header =~ s/\{\{classname\}\}/$classname/g;
    $header =~ s/\{\{functionname\}\}/$functionname/g;
    $header =~ s/\{\{includes\}\}/$includes/g;
    $footer =~ s/\{\{classname\}\}/$classname/g;
    $footer =~ s/\{\{functionname\}\}/$functionname/g;
    $footer =~ s/\{\{includes\}\}/$includes/g;

    print $output $header;

    my $tag;
    my $buffer;
    my $line = 0;
    while (<$input>) {
	++$line;
	s/\r\n$/\n/;
	if (/^-- SQL :: ([[:alnum:][:blank:]]+)(?: :: (\d+)\.(\d+))?$/) {
	    my $new_tag = [$1, $line, $2, $3];
	    flush_sql($output, $tag, $buffer) if ($tag);
	    $tag = $new_tag;
	    $buffer = '';
	}
	elsif ($tag) {
	    $buffer .= $_;
	}
    }
    flush_sql($output, $tag, $buffer) if ($tag);

    print $output $footer;
}

my $classname = $opt_c || 'SqlDictionary';
my $functionname = $opt_f || "Get$classname";
if (@ARGV == 0) {
    process_header($classname, $functionname, \*STDIN, \*STDOUT);
}
else {
    my $infilename = shift;
    open my $input, '<', $infilename or die "Unable to read '$infilename': $!\n";
    my $outfilename = shift;
    if (!$outfilename) {
	$outfilename = $infilename;
	$infilename =~ s/\.sql$/_sql/;
	$outfilename .= ".h";
    }
    open my $output, '>', $outfilename or die "Unable to write '$outfilename': $!\n";
    process_header($classname, $functionname, $input, $output);
}

__DATA__
#include "sql_dictionary.h"
{{includes}}
class {{classname}} : public SqlDictionary {
public:
    {{classname}}() {
{{content}}
    }
};
const SqlDictionary& {{functionname}}() {
  static {{classname}} obj;
  return obj;
}
